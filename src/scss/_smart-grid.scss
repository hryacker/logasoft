@use 'sass:math';

$columns: 12;
$atom: math.div(100%, $columns);

$break_lg: 1110px;
$break_md: 992px;
$break_sm: 720px;
$break_xs: 576px;

$offset: 30px;
$offset_lg: $offset;
$offset_md: $offset;
$offset_sm: $offset;
$offset_xs: 20px;

$offset_one_side: math.div($offset, 2);
$offset_lg_one_side: math.div($offset_lg, 2);
$offset_md_one_side: math.div($offset_md, 2);
$offset_sm_one_side: math.div($offset_sm, 2);
$offset_xs_one_side: math.div($offset_xs, 2);

$fields: 15px;
$fields_xs: 10px;

@mixin wrapper-full(){
    padding-left: $fields;
    padding-right: $fields;

    @include xs-block(){
        padding-left: $fields_xs;
        padding-right: $fields_xs;
    }
}

@mixin row-offsets(){
    margin-left: ($offset_one_side * -1);
    margin-right: ($offset_one_side * -1);

    @include xs-block(){
        margin-left: ($offset_xs_one_side * -1);
        margin-right: ($offset_xs_one_side * -1);
    }
}

@mixin col-offsets($type){
    #{$type}-left: $offset_one_side;
    #{$type}-right: $offset_one_side;

    @include xs-block(){
        #{$type}-left: $offset_xs_one_side;
        #{$type}-right: $offset_xs_one_side;
    }
}

@mixin wrapper(){
    max-width: 1110px;
    margin: 0 auto;
    @include wrapper-full();
}

@mixin row-flex(){
    display: flex;
    flex-wrap: wrap;
    @include row-offsets();
}

@mixin row-float(){
    @include row-offsets();
    @include clearfix();
}

@mixin row-ib(){
    @include row-offsets();
}

@mixin col(){
    box-sizing: border-box;
    word-wrap: break-word;
    @include col-offsets(margin);
}

@mixin col-float(){
    float: left;
}

@mixin col-ib(){
    display: inline-block;
    vertical-align: top;
}

@mixin col-padding(){
    word-wrap: break-word;
    @include col-offsets(padding);
}

@mixin size($n){
    $val: #{calc(100% / #{$columns} * #{$n} - #{$offset})};
    width: $val;
}

@mixin size-lg($n){
    $val: #{calc(100% / #{$columns} * #{$n} - #{$offset_lg})};
    @include lg(width, $val);
}

@mixin size-md($n){
    $val: #{calc(100% / #{$columns} * #{$n} - #{$offset_md})};
    @include md(width, $val);
}

@mixin size-sm($n){
    $val: #{calc(100% / #{$columns} * #{$n} - #{$offset_sm})};
    @include sm(width, $val);
}

@mixin size-xs($n){
    $val: #{calc(100% / #{$columns} * #{$n} - #{$offset_xs})};
    @include xs(width, $val);
}

@mixin shift($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_one_side})};
    margin-left: $val;
    margin-right: $val;
}

@mixin shift-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_one_side})};
    margin-left: $val;
}

@mixin shift-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_one_side})};
    margin-right: $val;
}

@mixin shift-padding($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_one_side})};
    padding-left: $val;
    padding-right: $val;
}

@mixin shift-padding-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_one_side})};
    padding-left: $val;
}

@mixin shift-padding-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_one_side})};
    padding-right: $val;
}

@mixin shift-lg($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_lg_one_side})};
    @include lg(margin-left, $val);
    @include lg(margin-right, $val);
}

@mixin shift-lg-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_lg_one_side})};
    @include lg(margin-left, $val);
}

@mixin shift-lg-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_lg_one_side})};
    @include lg(margin-right, $val);
}

@mixin shift-lg-padding($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_lg_one_side})};
    @include lg(padding-left, $val);
    @include lg(padding-right, $val);
}

@mixin shift-lg-padding-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_lg_one_side})};
    @include lg(padding-left, $val);
}

@mixin shift-lg-padding-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_lg_one_side})};
    @include lg(padding-right, $val);
}

@mixin shift-md($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_md_one_side})};
    @include md(margin-left, $val);
    @include md(margin-right, $val);
}

@mixin shift-md-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_md_one_side})};
    @include md(margin-left, $val);
}

@mixin shift-md-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_md_one_side})};
    @include md(margin-right, $val);
}

@mixin shift-md-padding($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_md_one_side})};
    @include md(padding-left, $val);
    @include md(padding-right, $val);
}

@mixin shift-md-padding-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_md_one_side})};
    @include md(padding-left, $val);
}

@mixin shift-md-padding-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_md_one_side})};
    @include md(padding-right, $val);
}

@mixin shift-sm($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_sm_one_side})};
    @include sm(margin-left, $val);
    @include sm(margin-right, $val);
}

@mixin shift-sm-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_sm_one_side})};
    @include sm(margin-left, $val);
}

@mixin shift-sm-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_sm_one_side})};
    @include sm(margin-right, $val);
}

@mixin shift-sm-padding($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_sm_one_side})};
    @include sm(padding-left, $val);
    @include sm(padding-right, $val);
}

@mixin shift-sm-padding-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_sm_one_side})};
    @include sm(padding-left, $val);
}

@mixin shift-sm-padding-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_sm_one_side})};
    @include sm(padding-right, $val);
}

@mixin shift-xs($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_xs_one_side})};
    @include xs(margin-left, $val);
    @include xs(margin-right, $val);
}

@mixin shift-xs-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_xs_one_side})};
    @include xs(margin-left, $val);
}

@mixin shift-xs-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_xs_one_side})};
    @include xs(margin-right, $val);
}

@mixin shift-xs-padding($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_xs_one_side})};
    @include xs(padding-left, $val);
    @include xs(padding-right, $val);
}

@mixin shift-xs-padding-left($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_xs_one_side})};
    @include xs(padding-left, $val);
}

@mixin shift-xs-padding-right($n){
    $val: #{calc(100% / #{$columns} * #{$n} + #{$offset_xs_one_side})};
    @include xs(padding-right, $val);
}

@mixin lg($name, $value){
    @media screen and (max-width: $break_lg){
        #{$name}: $value;
    }
}

@mixin lg-block(){
    @media screen and (max-width: $break_lg){
        @content;
    }
}

@mixin md($name, $value){
    @media screen and (max-width: $break_md){
        #{$name}: $value;
    }
}

@mixin md-block(){
    @media screen and (max-width: $break_md){
        @content;
    }
}

@mixin sm($name, $value){
    @media screen and (max-width: $break_sm){
        #{$name}: $value;
    }
}

@mixin sm-block(){
    @media screen and (max-width: $break_sm){
        @content;
    }
}

@mixin xs($name, $value){
    @media screen and (max-width: $break_xs){
        #{$name}: $value;
    }
}

@mixin xs-block(){
    @media screen and (max-width: $break_xs){
        @content;
    }
}

@mixin from($min_width){
    @media screen and (min-width: $min_width){
        @content;
    }
}

@mixin to($max_width){
    @media screen and (max-width: $max_width){
        @content;
    }
}

@mixin from-to($min_width, $max_width){
    @media screen and (min-width: $min_width) and (max-width: $max_width){
        @content;
    }
}

@mixin u-row-flex($offset){
    display: flex;
    flex-wrap: wrap;
    margin-left: math.div($offset, -2);
    margin-right: math.div($offset, -2);
}

@mixin u-col($offset){
    box-sizing: border-box;
    word-wrap: break-word;
    margin-left: math.div($offset, 2);
    margin-right: math.div($offset, 2);
}

@mixin u-size($n, $columns, $offset){
    width: #{calc(100% / #{$columns} * #{$n} - #{$offset})};
}

@mixin debug($background, $outline){
    height: 100vh;
    position: fixed;
    width: 100%;
    
    > div{
        height: inherit;
        @include wrapper();
        
        > div{
            height: inherit;
            @include row-flex();
            
            > div{
                @include col();
                @include size(1);
                @include size-xs(1);
                height: inherit;
                outline: $outline;
                background: $background;
            }
        }
    }
}